# -*- mode: org; org-confirm-babel-evaluate: nil; coding: utf-8 -*-
* pcre2 single expression

   At least 3 of the first 4

   1. English uppercase characters A-Z
   2. English lowercase characters a-z
   3. Numerals 0-9
   4. Non-alphanumeric characters
   5. Length minimum 14 maximum 64

   3 and 4 imply no program identifiers

   #+BEGIN_SRC python :results value verbatim :session main :exports both :python ipython
     e = [
         r'(',
         r'[A-Z]',
         r'|',
         r'[a-z]',
         r'|',
         r'[0-9]',
         r'|',
         r'[[:punct:]]',
         r'|',
         r' ',
         r'@',
         r')',
         r'{14,64}',
     ]
     "".join([r'(',
              e[1],
              r'|', 
              e[3],
              r'|', 
              e[5],
              r'|', 
              e[7],
              r')', 
              ])
   #+END_SRC

   #+RESULTS:
   : ([A-Z]|[a-z]|[0-9]|[[:punct:]])


   #+BEGIN_SRC python :results value verbatim :session main :exports both :python ipython
     def comb(s):
         return "".join([r'(',
                         e[s[0]],
                         r'|', 
                         e[s[1]],
                         r'|', 
                         e[s[2]],
                         r'|', 
                         e[s[3]],
                         r')', 
                         ])

     exprs = [
         r'(', 
         comb([ 1, 3,  5,  7]), 
         r'|', 
         comb([10, 3,  5,  7]), 
         r'|', 
         comb([ 1,10,  5,  7]), 
         r'|', 
         comb([ 1, 3, 10,  7]), 
         r'|', 
         comb([ 1, 3,  5, 10]), 
         r')',
         r'{14,64}',
     ]

     pats = r''.join(exprs)
     pats
   #+END_SRC

   #+RESULTS:
   : (([A-Z]|[a-z]|[0-9]|[[:punct:]])|(@|[a-z]|[0-9]|[[:punct:]])|([A-Z]|@|[0-9]|[[:punct:]])|([A-Z]|[a-z]|@|[[:punct:]])|([A-Z]|[a-z]|[0-9]|@)){14,64}


   #+BEGIN_SRC python :results value verbatim :session main :exports both :python ipython
     import pcre2
     patn = pcre2.compile(pats, options=pcre2.I, jit=True)
     patn.jit_compile()
     subj = 'foo bar 091..##bar091..##bar091..##'
     subj = 'foobar091..##bar091..##bar091..##'
     subj = 'foo'
     import pcre2.exceptions
     match = 'no match'
     try:
         match = patn.match(subj)
         match.substring()
     except pcre2.exceptions.MatchError:
         pass
     match
   #+END_SRC

   #+RESULTS:
   : no match



  
